(load "src/core.scm")
(load "tests/test-utils.scm")

(define (test-if-expression)
  (let ((env (setup-environment)))
    (assert (schenne-eval '(if true 1 0) env) 1)
    (write ".")
    (assert (schenne-eval '(if false 1 0) env) 0)
    (write ".")
    (assert (schenne-eval '(if (< 1 2) 1 0) env) 1)
    (write ".")
    (assert (schenne-eval '(if (> 1 2) 1 0) env) 0)))
    (write ".")

(define (test-definition)
  (let ((env (setup-environment)))
    (schenne-eval '(define x 5) env) 
    (write ".")
    (schenne-eval '(define y 10) env) 
    (write ".")
    (assert (schenne-eval 'x env) 5)
    (write ".")
    (assert (schenne-eval 'y env) 10)
    (write ".")
    (schenne-eval '(define x 1) env) 
    (write ".")
    (assert (schenne-eval 'x env) 1)
    (write ".")
    (assert (schenne-eval 'y env) 10)
    (write ".")
    (schenne-eval '(define y 2) env) 
    (write ".")
    (assert (schenne-eval 'x env) 1)
    (write ".")
    (assert (schenne-eval 'y env) 2)))
    (write ".")

(define (test-lambda-environment)
  (let ((env (setup-environment)))
    (assert (schenne-eval '((lambda () 1)) env) 1)
    (write ".")
    (assert (schenne-eval '((lambda (x) (* x x x x)) 2) env) 16)
    (write ".")
    (assert (schenne-eval '((lambda (x y) (* x y)) 4 8) env) 32)
    (write ".")
    (assert (schenne-eval '((lambda (x y z) (if (> x 0) y z)) 1 0 1) env) 0)
    (write ".")
    (assert (schenne-eval '((lambda (x y z) (if (> x 0) y z)) -1 0 1) env) 1)
    (write ".")))

(define (run-eval-tests)
  (newline)
  (test-if-expression)
  (write "Passed if-expression tests.")

  (newline)
  (test-definition)
  (write "Passed definition tests.")

  (newline)
  (test-lambda-environment)
  (write "Passed lambda-expression tests."))

(run-eval-tests)
